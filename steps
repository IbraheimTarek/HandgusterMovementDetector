Background Subtraction:

Use background subtraction techniques to identify the hand against a relatively static background.
Skin Color Detection:

Utilize skin color detection algorithms to identify regions in the image that are likely to be hands. Skin color typically falls within a specific range in the RGB or YUV color space.
Contour Analysis:

Compute HOG features to capture the shape and orientation of the hand. Train a simple classifier, such as Support Vector Machines (SVM), to distinguish between different hand orientations.

Optical Flow:
Apply optical flow techniques to track the movement of hand pixels over consecutive frames, allowing you to infer the direction of motion.

Kalman Filtering:
Use Kalman filters to estimate the state of the hand and predict its future position based on previous observations.

Rule-Based Approaches:
Define a set of rules based on geometric features or motion patterns to determine the hand direction.
Keep in mind that the effectiveness of these methods may depend on the specific conditions of your project, such as lighting, background complexity, and the variability of hand appearances. You may need to combine multiple techniques or experiment with different parameters to achieve robust performance.

OpenCV is a powerful library in Python that provides implementations for many of these algorithms, making it a good choice for your project.